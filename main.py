import os
import logging
import asyncio
import re
import uuid
import time
from telethon import TelegramClient, events, Button
import yt_dlp
from flask import Flask
import threading

# --- ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- ‡¶è‡¶®‡¶≠‡¶æ‡ßü‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßç‡¶∞‡ßá‡¶°‡ßá‡¶®‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ---
try:
    API_ID = int(os.environ.get("API_ID"))
    API_HASH = os.environ.get("API_HASH")
    BOT_TOKEN = os.environ.get("BOT_TOKEN")
except (ValueError, TypeError):
    logger.critical("API_ID, API_HASH, and BOT_TOKEN must be set correctly in environment variables.")
    exit(1)

# --- Telethon ‡¶ï‡ßç‡¶≤‡¶æ‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶® ---
client = TelegramClient('bot_session', API_ID, API_HASH)

# --- ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶¶‡ßá‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ (state) ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶°‡¶ø‡¶ï‡¶∂‡¶®‡¶æ‡¶∞‡¶ø ---
user_data = {}

# --- Helper Functions ---
def cleanup_files(*paths):
    """Temporary ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø"""
    for path in paths:
        if path and os.path.exists(path):
            try:
                os.remove(path)
            except OSError as e:
                logger.error(f"Error deleting file {path}: {e}")

# --- Command Handlers ---
@client.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    user = await event.get_sender()
    await event.respond(
        f"üëã ‡¶π‡¶æ‡¶á {user.first_name}!\n\n‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶∂‡¶ï‡ßç‡¶§‡¶ø‡¶∂‡¶æ‡¶≤‡ßÄ URL ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ü‡•§ ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶¶‡¶ø‡¶®, ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡ßá‡¶ü‡¶ø **2 GB ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§** ‡¶´‡¶æ‡¶á‡¶≤ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶¨‡ßã‡•§\n\n‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø /help ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
    )

@client.on(events.NewMessage(pattern='/help'))
async def help_handler(event):
    await event.respond(
        "**‚ÑπÔ∏è ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®:**\n\n"
        "1. ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã URL ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§\n"
        "2. '‡¶≠‡¶ø‡¶°‡¶ø‡¶ì' ‡¶¨‡¶æ '‡¶´‡¶æ‡¶á‡¶≤' ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®‡•§\n"
        "3. (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï) ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§ ‡¶®‡¶æ ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡¶ø‡ßü‡ßá `/skip` ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§\n\n"
        "**‚ö†Ô∏è ‡¶∏‡ßÄ‡¶Æ‡¶æ‡¶¨‡¶¶‡ßç‡¶ß‡¶§‡¶æ:**\n"
        "- ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶Ü‡¶ï‡¶æ‡¶∞: **2 GB**\n"
        "- ‡¶¨‡ßú ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ï‡ßç‡¶∑‡¶Æ‡¶§‡¶æ‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ü‡¶æ ‡¶∏‡¶Æ‡ßü ‡¶≤‡¶æ‡¶ó‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§\n\n"
        "‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡ßü‡ßá ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá `/cancel` ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶®‡•§"
    )

@client.on(events.NewMessage(pattern='/cancel'))
async def cancel_handler(event):
    user_id = event.sender_id
    if user_id in user_data:
        # ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ
        cleanup_files(user_data[user_id].get('thumbnail_path'))
        del user_data[user_id]
        await event.respond("‚úÖ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ‡¶ü‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
    else:
        await event.respond("‡¶è‡¶ñ‡¶® ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶®‡ßá‡¶á‡•§")

# --- Core Logic Handlers ---
@client.on(events.NewMessage(pattern=re.compile(r'https?://')))
async def url_handler(event):
    user_id = event.sender_id
    if user_id in user_data and 'state' in user_data[user_id]:
        await event.respond("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ö‡¶≤‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ü‡¶ø ‡¶∂‡ßá‡¶∑ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ /cancel ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return

    url = event.text
    user_data[user_id] = {'url': url, 'state': 'waiting_for_format'}
    
    buttons = [
        [Button.inline("üé¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì (Video)", data="video"), Button.inline("üìÑ ‡¶´‡¶æ‡¶á‡¶≤ (File)", data="document")]
    ]
    await event.respond("‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßã‡¶® ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶ö‡¶æ‡¶®?", buttons=buttons)

@client.on(events.CallbackQuery)
async def callback_handler(event):
    user_id = event.sender_id
    if user_id not in user_data or user_data[user_id]['state'] != 'waiting_for_format':
        await event.answer("‡¶è‡¶á ‡¶¨‡¶æ‡¶ü‡¶®‡¶ü‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡ßü ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶è‡¶∞ ‡¶Æ‡ßá‡ßü‡¶æ‡¶¶ ‡¶∂‡ßá‡¶∑‡•§", alert=True)
        return

    choice = event.data.decode('utf-8')
    user_data[user_id]['format'] = choice
    
    if choice == 'video':
        user_data[user_id]['state'] = 'waiting_for_thumbnail'
        await event.edit("‡¶ö‡¶Æ‡ßé‡¶ï‡¶æ‡¶∞! ‡¶è‡¶ñ‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§ ‡¶®‡¶æ ‡¶ö‡¶æ‡¶á‡¶≤‡ßá `/skip` ‡¶ü‡¶æ‡¶á‡¶™ ‡¶ï‡¶∞‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§")
    else:
        await event.edit("‚úÖ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        await process_and_upload(event, user_id)

@client.on(events.NewMessage)
async def message_handler(event):
    user_id = event.sender_id
    if user_id not in user_data or 'state' not in user_data[user_id]:
        return

    if user_data[user_id]['state'] == 'waiting_for_thumbnail':
        if event.photo:
            thumb_path = await client.download_media(event.photo, file=f"downloads/{uuid.uuid4()}.jpg")
            user_data[user_id]['thumbnail_path'] = thumb_path
            await event.respond("‚úÖ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶™‡ßá‡ßü‡ßá‡¶õ‡¶ø‡•§ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
            await process_and_upload(event, user_id)
        elif event.text.strip().lower() == '/skip':
            user_data[user_id]['thumbnail_path'] = None
            await event.respond("üëç ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá, ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
            await process_and_upload(event, user_id)
        else:
            await event.respond("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ `/skip` ‡¶ü‡¶æ‡¶á‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

# --- Download and Upload Function ---
async def process_and_upload(event, user_id):
    user_info = user_data.get(user_id, {})
    url = user_info.get('url')
    file_format = user_info.get('format')
    thumbnail_path = user_info.get('thumbnail_path')
    
    if not url or not file_format:
        await event.respond("‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return

    progress_msg = await event.respond("‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá... ‚è≥")
    start_time = time.time()
    downloaded_file_path = None

    def progress_hook(d):
        if d['status'] == 'downloading':
            pass
        elif d['status'] == 'finished':
            nonlocal downloaded_file_path
            downloaded_file_path = d.get('filename') or d.get('info_dict', {}).get('_filename')

    output_template = f"downloads/{uuid.uuid4()}/%(title)s.%(ext)s"
    ydl_opts = {
        'outtmpl': output_template,
        'noplaylist': True,
        'progress_hooks': [progress_hook],
        'postprocessors': [{'key': 'FFmpegVideoConvertor', 'preferedformat': 'mp4'}] if file_format == 'video' else [],
        'nocheckcertificate': True
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.extract_info(url, download=True)
        
        if not downloaded_file_path or not os.path.exists(downloaded_file_path):
            raise ValueError("‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡¶§ ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§ (private) ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶∏‡ßÅ‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§‡•§")
            
        await progress_msg.edit("‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®! ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá... üöÄ")

        file_attributes = []
        if file_format == 'video':
            from telethon.tl.types import DocumentAttributeVideo
            file_attributes.append(DocumentAttributeVideo(duration=0, w=0, h=0, supports_streaming=True))
        
        await client.send_file(
            event.chat_id,
            file=downloaded_file_path,
            thumb=thumbnail_path,
            attributes=file_attributes,
            force_document=(file_format == 'document'),
            caption=os.path.basename(downloaded_file_path).rsplit('.', 1)[0]
        )
        await progress_msg.delete()

    except Exception as e:
        logger.error(f"Error processing for user {user_id}: {e}")
        await progress_msg.edit(f"‚ùå ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡¶æ‡¶∞‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§\n\n**‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø:** `{str(e)[:500]}`")
    finally:
        cleanup_files(downloaded_file_path, thumbnail_path)
        if user_id in user_data:
            del user_data[user_id]

# --- Flask Web Server Part ---
app = Flask(__name__)

@app.route('/')
def health_check():
    return "Bot is running healthily!", 200

def run_flask():
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)

# --- Main Execution ---
async def main():
    os.makedirs("downloads", exist_ok=True)
    
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    await client.start(bot_token=BOT_TOKEN)
    logger.info("Bot has started successfully and web server is running!")
    await client.run_until_disconnected()

if __name__ == '__main__':
    if not all([API_ID, API_HASH, BOT_TOKEN]):
        logger.critical("One or more environment variables (API_ID, API_HASH, BOT_TOKEN) are missing.")
    else:
        asyncio.run(main())
